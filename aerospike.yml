---
namespace: aerospike
base:
  metadata:
    defines: metadata
    name: Aerospike Real-Time Data Platform
    description: |
      Aerospike is a high-performance, distributed NoSQL database management system that is designed to handle large amounts of data with low latency and high throughput. It is optimized for use cases that require fast data access, such as real-time bidding, fraud detection, and recommendation engines.

      Aerospike uses a key-value data model, where data is stored as key-value pairs. It also includes support for complex data types such as lists, maps, and sets. Aerospike is designed to be highly scalable and fault-tolerant, with built-in support for data replication, automatic data distribution across multiple nodes, and automatic failover in case of node failure.

      Aerospike is also highly optimized for performance, with a number of features that reduce latency and improve throughput. For example, it uses a hybrid memory architecture that combines DRAM and flash memory to maximize performance and minimize cost.

      Aerospike provides a SQL-like query language called Aerospike Query Language (ASQL), as well as APIs for popular programming languages such as Java, Python, and C#. It also includes a web-based interface called Aerospike Management Console (AMC), which allows administrators to monitor performance, manage nodes, and perform backups and restores.

      Overall, Aerospike is a highly performant and scalable NoSQL database management system that is well-suited for use cases that require low latency and high throughput. It is used in a variety of applications, including e-commerce, ad tech, and financial services.
    website: https://aerospike.com/
    publisher: monk.io
    icon: https://aerospike.com/wp-content/themes/pro-child/dist/img/logo.png
  containers:
    base:
      image: aerospike
      image-tag: <- `${image_tag}`
      paths:
        - <- `${monk-volume-path}/aerospike:/opt/aerospike/data`
aerospike:
  inherits: aerospike/base
  defines: runnable
  variables:
    image_tag:
      type: string
      value: ce-6.2.0.7_1
    service_port:
      env: SERVICE_PORT
      type: string
      value: 3000
  services:
    base-svc:
      port: 3000
      container: base
      protocol: tcp
      host-port: <- `${service_port}`
